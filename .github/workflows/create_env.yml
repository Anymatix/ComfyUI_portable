name: Create Miniconda Zips for Multiple Platforms

on:
  workflow_dispatch: # Manual trigger
    inputs:
      zip_root_name:
        description: 'Root name for zip files (default: anymatix)'
        required: false
        default: 'anymatix-comfyui-portable'
      version:
        description: 'Release version (default: 1.0.0)'
        required: false
        default: '1.0.0'

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    env:
      ZIP_ROOT_NAME: ${{ github.event.inputs.zip_root_name || 'anymatix-comfyui-portable' }}
      RELEASE_VERSION: ${{ github.event.inputs.version || '1.0.0' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install 7-Zip (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install 7zip -y

    - name: Install 7-Zip (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y p7zip-full

    - name: Install 7-Zip (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install p7zip

    - name: Run setup script
      run: node setup-python-env.js

    - name: List directories (Unix)
      if: runner.os != 'Windows'
      run: ls -la

    - name: List directories (Windows)
      if: runner.os == 'Windows'
      run: Get-ChildItem -Force

    - name: Clean up before zipping
      shell: bash
      run: |
        if [ -d "anymatix/miniforge" ]; then
          echo "Starting aggressive cleanup to reduce size..."
          
          # Remove unnecessary directories
          find anymatix/miniforge -type d -name '__pycache__' -exec rm -rf {} \; 2>/dev/null || true
          find anymatix/miniforge -type d -name 'tests' -exec rm -rf {} \; 2>/dev/null || true
          find anymatix/miniforge -type d -name 'test' -exec rm -rf {} \; 2>/dev/null || true
          
          # Remove package info and documentation
          find anymatix/miniforge -type d -name '*.dist-info' -exec rm -rf {} \; 2>/dev/null || true
          find anymatix/miniforge -type d -name '*.egg-info' -exec rm -rf {} \; 2>/dev/null || true
          find anymatix/miniforge -type d -name 'man' -exec rm -rf {} \; 2>/dev/null || true
          find anymatix/miniforge -type d -name 'doc' -exec rm -rf {} \; 2>/dev/null || true
          find anymatix/miniforge -type d -name 'docs' -exec rm -rf {} \; 2>/dev/null || true
          find anymatix/miniforge -type d -name 'examples' -exec rm -rf {} \; 2>/dev/null || true
          
          # Remove conda package cache and unnecessary files
          rm -rf anymatix/miniforge/pkgs/* 2>/dev/null || true
          rm -rf anymatix/miniforge/conda-meta/*.json 2>/dev/null || true
          rm -rf anymatix/miniforge/envs 2>/dev/null || true
          
          # Remove unnecessary file types
          find anymatix/miniforge -name "*.a" -delete 2>/dev/null || true
          find anymatix/miniforge -name "*.js.map" -delete 2>/dev/null || true
          find anymatix/miniforge -name "*.h" -delete 2>/dev/null || true
          find anymatix/miniforge -name "*.hpp" -delete 2>/dev/null || true
          find anymatix/miniforge -name "*.c" -delete 2>/dev/null || true
          find anymatix/miniforge -name "*.cpp" -delete 2>/dev/null || true
          
          # Remove unused Python standard library modules
          for dir in anymatix/miniforge/lib/python*/; do
            if [ -d "$dir" ]; then
              for module in idlelib turtledemo tkinter ensurepip distutils lib2to3 unittest; do
                rm -rf "$dir/$module" 2>/dev/null || true
              done
            fi
          done
          
          # Remove .git directories from cloned repositories
          find anymatix -type d -name '.git' -exec rm -rf {} \; 2>/dev/null || true
          
          # Report size after cleanup
          echo "Size after cleanup:"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            powershell -Command "Get-ChildItem -Path anymatix -Recurse | Measure-Object -Property Length -Sum | Select-Object -ExpandProperty Sum"
          else
            du -sh anymatix
          fi
        fi

    - name: Create 7z archive (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $zipPath = "${{ env.ZIP_ROOT_NAME }}-windows.7z"
        if (Test-Path -Path "anymatix") {
          7z a -t7z -mx=9 -mfb=273 -ms -md=31 -myx=9 -mtm=- -mmt -mmtf -md=1536m -mmf=bt3 -mmc=10000 -mpb=0 -mlc=0 $zipPath anymatix
          # Report final archive size
          Get-Item $zipPath | Select-Object Length,Name
        } else {
          Write-Error "Error: anymatix directory not found"
          exit 1
        }
        echo "ZIP_PATH=$zipPath" >> $env:GITHUB_ENV

    - name: Create 7z archive (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "macOS" ]]; then
          zipPath="${{ env.ZIP_ROOT_NAME }}-macos.7z"
        else
          zipPath="${{ env.ZIP_ROOT_NAME }}-linux.7z"
        fi
        
        if [ -d "anymatix" ]; then
          7z a -t7z -mx=9 -mfb=273 -ms -md=31 -myx=9 -mtm=- -mmt -mmtf -md=1536m -mmf=bt3 -mmc=10000 -mpb=0 -mlc=0 "$zipPath" anymatix
          # Report final archive size
          du -sh "$zipPath"
        else
          echo "Error: anymatix directory not found"
          exit 1
        fi
        echo "ZIP_PATH=$zipPath" >> $GITHUB_ENV

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ZIP_ROOT_NAME }}-${{ runner.os }}
        path: ${{ env.ZIP_PATH }} 