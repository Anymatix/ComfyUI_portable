name: Create Miniconda Zips for Multiple Platforms

on:
  workflow_dispatch: # Manual trigger
    inputs:
      zip_root_name:
        description: 'Root name for zip files (default: anymatix)'
        required: false
        default: 'anymatix-comfyui-portable'
      version:
        description: 'Release version (default: 1.0.0)'
        required: false
        default: '1.0.0'
      force_rebuild:
        description: 'Force rebuild ignoring cache (true/false)'
        required: false
        default: 'true'
      enable_cleanup:
        description: 'Enable miniforge cleanup (WARNING: may break functionality)'
        required: false
        default: 'false'

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      ZIP_ROOT_NAME: ${{ github.event.inputs.zip_root_name || 'anymatix-comfyui-portable' }}
      RELEASE_VERSION: ${{ github.event.inputs.version || '1.0.0' }}
      FORCE_REBUILD: ${{ github.event.inputs.force_rebuild || 'true' }}
      ENABLE_CLEANUP: ${{ github.event.inputs.enable_cleanup || 'false' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'yarn'

    - name: Install dependencies
      run: |
        # Create a basic package.json if it doesn't exist
        if [ ! -f package.json ]; then
          echo '{"name":"ComfyUI_portable","dependencies":{}}' > package.json
        fi
        # Install dependencies with specific versions
        yarn add js-yaml@4.1.0 glob@7.2.3
      shell: bash

    - name: Create version.yml file
      run: |
        echo "version: '${{ env.RELEASE_VERSION }}'" > version.yml
        cat version.yml

    - name: Generate cache key
      id: cache-key
      run: |
        node -e "
        const fs = require('fs');
        const crypto = require('crypto');
        const os = require('os');
        
        // Calculate SHA256 hash of a file
        function calculateFileHash(filePath) {
          try {
            const fileBuffer = fs.readFileSync(filePath);
            const hashSum = crypto.createHash('sha256');
            hashSum.update(fileBuffer);
            return hashSum.digest('hex');
          } catch (err) {
            console.error('Error hashing file ' + filePath + ': ' + err.message);
            return 'error-hashing-file';
          }
        }
        
        // Generate cache key components
        const requirementsHash = calculateFileHash('requirements.txt');
        const setupScriptHash = calculateFileHash('setup-python-env.js');
        const platform = os.platform();
        const arch = os.arch();
        const enableCleanup = process.env.ENABLE_CLEANUP === 'true' ? '-cleanup' : '-nocleanup';
        
        // Create the cache key
        const cacheKey = 'anymatix-' + platform + '-' + arch + '-' + 
                         requirementsHash.substring(0, 8) + '-' + 
                         setupScriptHash.substring(0, 8) + 
                         enableCleanup + '-v' + process.env.RELEASE_VERSION;
        console.log('Cache key: ' + cacheKey);
        
        // Output for GitHub Actions
        const output = 'cache-key=' + cacheKey;
        if (process.env.GITHUB_OUTPUT) {
          fs.appendFileSync(process.env.GITHUB_OUTPUT, output + '\\n');
        } else {
          console.log('GITHUB_OUTPUT not set, output:', output);
        }
        "
      shell: bash

    # Cache the anymatix directory
    - name: Cache anymatix directory
      id: cache-anymatix
      if: env.FORCE_REBUILD != 'true'
      uses: actions/cache@v4
      with:
        path: anymatix
        key: ${{ steps.cache-key.outputs.cache-key }}
        restore-keys: |
          anymatix-${{ runner.os }}-${{ runner.arch }}-

    # Run setup script if cache miss or force rebuild
    - name: Run setup script
      if: steps.cache-anymatix.outputs.cache-hit != 'true' || env.FORCE_REBUILD == 'true'
      run: node setup-python-env.js --enable-cleanup=${{ env.ENABLE_CLEANUP }}

    # Add debugging steps to check PIL/.dylibs directory
    - name: Debug PIL/.dylibs directory
      run: |
        echo "Checking for PIL/.dylibs directory..."
        PIL_DYLIBS_DIR=$(find "anymatix/miniforge/lib" -path "*/site-packages/PIL/.dylibs" -type d | head -n 1)
        if [ -n "$PIL_DYLIBS_DIR" ]; then
          echo "Found PIL/.dylibs directory at: $PIL_DYLIBS_DIR"
          echo "Contents of PIL/.dylibs directory:"
          ls -la "$PIL_DYLIBS_DIR"
          echo "Checking for libtiff.6.dylib:"
          find "$PIL_DYLIBS_DIR" -name "libtiff*.dylib" | sort
        else
          echo "PIL/.dylibs directory not found!"
          echo "Searching for PIL directory:"
          find "anymatix/miniforge/lib" -path "*/site-packages/PIL" -type d | sort
        fi
        
        echo "Searching for libtiff.6.dylib in the entire miniforge directory:"
        find "anymatix/miniforge" -name "libtiff*.dylib" | sort
      shell: bash

    - name: List directories (Unix)
      if: runner.os != 'Windows'
      run: ls -la anymatix

    - name: List directories (Windows)
      if: runner.os == 'Windows'
      run: Get-ChildItem -Force anymatix

    # Create a zip file for caching
    - name: Create zip file
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          # Create a parent directory to ensure anymatix is included in the zip
          mkdir -p temp_zip_dir
          cp -r anymatix temp_zip_dir/
          powershell -Command "Compress-Archive -Path temp_zip_dir/anymatix -DestinationPath ${{ env.ZIP_ROOT_NAME }}-v${{ env.RELEASE_VERSION }}-${{ runner.os }}.zip -Force"
          rm -rf temp_zip_dir
        else
          # Create a zip that includes the anymatix directory itself
          mkdir -p temp_zip_dir
          cp -r anymatix temp_zip_dir/
          cd temp_zip_dir
          zip -r ../${{ env.ZIP_ROOT_NAME }}-v${{ env.RELEASE_VERSION }}-${{ runner.os }}.zip anymatix
          cd ..
          rm -rf temp_zip_dir
        fi
      shell: bash

    # Cache the zip file
    - name: Cache zip file
      id: cache-zip
      if: env.FORCE_REBUILD != 'true'
      uses: actions/cache@v4
      with:
        path: ${{ env.ZIP_ROOT_NAME }}-v${{ env.RELEASE_VERSION }}-${{ runner.os }}.zip
        key: ${{ steps.cache-key.outputs.cache-key }}-zip
        restore-keys: |
          anymatix-${{ runner.os }}-${{ runner.arch }}-zip-

    # Create a release artifact with the anymatix directory
    - name: Create release artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ZIP_ROOT_NAME }}-v${{ env.RELEASE_VERSION }}-${{ runner.os }}
        path: anymatix/
        compression-level: 0 