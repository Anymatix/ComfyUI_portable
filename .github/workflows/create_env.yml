name: Create Miniconda Zips for Multiple Platforms

on:
  workflow_dispatch: # Manual trigger
    inputs:
      zip_root_name:
        description: 'Root name for zip files (default: anymatix)'
        required: false
        default: 'anymatix-comfyui-portable'
      version:
        description: 'Release version (default: 1.0.0)'
        required: false
        default: '1.0.0'

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    env:
      ZIP_ROOT_NAME: ${{ github.event.inputs.zip_root_name || 'anymatix-comfyui-portable' }}
      RELEASE_VERSION: ${{ github.event.inputs.version || '1.0.0' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Run setup script
      run: node setup-python-env.js

    - name: List directories (Unix)
      if: runner.os != 'Windows'
      run: ls -la

    - name: List directories (Windows)
      if: runner.os == 'Windows'
      run: Get-ChildItem -Force

    - name: Clean up before zipping
      shell: bash
      run: |
        if [ -d "anymatix/miniconda" ]; then
          # Remove unnecessary files
          find anymatix/miniconda -type d -name '__pycache__' -exec rm -rf {} +
          find anymatix/miniconda -type d -name 'tests' -exec rm -rf {} +
          find anymatix/miniconda -type d -name 'test' -exec rm -rf {} +
          find anymatix/miniconda -type d -name '*.dist-info' -exec rm -rf {} +
          find anymatix/miniconda -type d -name '*.egg-info' -exec rm -rf {} +
          
          # Remove documentation files
          find anymatix/miniconda -type f -name '*.pyc' -delete
          find anymatix/miniconda -type f -name '*.pyo' -delete
          find anymatix/miniconda -type f -name '*.pyd' -delete
          find anymatix/miniconda -type f -name '*.so' -delete
        fi

    - name: Zip anymatix directory (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $zipPath = "${{ env.ZIP_ROOT_NAME }}-windows.zip"
        if (Test-Path -Path "anymatix") {
          Push-Location -Path "anymatix"
          Compress-Archive -Path "." -DestinationPath "../$zipPath" -CompressionLevel Optimal
          Pop-Location
        } else {
          Write-Error "Error: anymatix directory not found"
          exit 1
        }
        echo "ZIP_PATH=$zipPath" >> $env:GITHUB_ENV

    - name: Zip anymatix directory (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "macOS" ]]; then
          zipPath="${{ env.ZIP_ROOT_NAME }}-macos.zip"
        else
          zipPath="${{ env.ZIP_ROOT_NAME }}-linux.zip"
        fi
        
        if [ -d "anymatix" ]; then
          cd anymatix
          zip -r -9 ../$zipPath . -x "*.git*" "*.DS_Store*"
          cd ..
        else
          echo "Error: anymatix directory not found"
          exit 1
        fi
        echo "ZIP_PATH=$zipPath" >> $GITHUB_ENV

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ZIP_ROOT_NAME }}-${{ runner.os }}
        path: ${{ env.ZIP_PATH }}
